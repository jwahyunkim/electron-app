import { j as jsx, a as jsxs, p, d as defaultThemeBase, b as defaultTheme, s, m, L as ListItemBase, f as f$1, c as ListItemAccessibleRole, e as ListItemGroupHeader, D as DropIndicator, g as fnEncodeXML, h as d, i as ListItemGroup, F as Fragment, B as Button, I as Input, k as Icon, R as ResponsivePopover, l as ListAccessibleRole, n as List, o as decline, q as LIST_ITEM_GROUP_HEADER, r as LIST_ITEM_POSITION } from "./index-B__XUdVg.js";
function ListItemBaseTemplate(hooks, injectedProps) {
  const listItemContent2 = hooks?.listItemContent || defaultListItemContent;
  return jsx("li", { part: "native-li", "data-sap-focus-ref": true, tabindex: this._effectiveTabIndex, class: this.classes.main, draggable: this.movable, role: injectedProps?.role, title: injectedProps?.title, onFocusIn: this._onfocusin, onKeyUp: this._onkeyup, onKeyDown: this._onkeydown, onClick: this._onclick, children: listItemContent2.call(this) });
}
function defaultListItemContent() {
  return jsx("div", { part: "content", id: `${this._id}-content`, class: "ui5-li-content", children: jsx("div", { class: "ui5-li-text-wrapper", children: jsx("span", { part: "title", class: "ui5-li-title", children: jsx("slot", {}) }) }) });
}
function SuggestionItemTemplate() {
  return [ListItemBaseTemplate.call(this, { listItemContent }, { role: "option" })];
}
function listItemContent() {
  return jsx("div", { part: "content", id: "content", class: "ui5-li-content", children: jsxs("div", { class: "ui5-li-text-wrapper", children: [jsx("span", { part: "title", className: "ui5-li-title", dangerouslySetInnerHTML: { __html: this.markupText } }), this.additionalText && jsx("span", { part: "additional-text", class: "ui5-li-additional-text", children: this.additionalText })] }) });
}
p("@ui5/webcomponents-theming", "sap_horizon", async () => defaultThemeBase);
p("@ui5/webcomponents", "sap_horizon", async () => defaultTheme);
const styles = `:host([ui5-suggestion-item]){height:auto;min-height:var(--_ui5-v2-14-0_list_item_base_height)}:host([ui5-suggestion-item]) .ui5-li-root{min-height:var(--_ui5-v2-14-0_list_item_base_height)}:host([ui5-suggestion-item]) .ui5-li-content{padding-bottom:.5rem;padding-top:.5rem;box-sizing:border-box}
`;
var __decorate$1 = function(decorators, target, key, desc) {
  var c = arguments.length, r2 = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r2 = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r2 = (c < 3 ? d2(r2) : c > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
  return c > 3 && r2 && Object.defineProperty(target, key, r2), r2;
};
let SuggestionItem = class SuggestionItem2 extends ListItemBase {
  constructor() {
    super(...arguments);
    this.markupText = "";
  }
  onEnterDOM() {
    if (f$1()) {
      this.setAttribute("desktop", "");
    }
  }
  get _effectiveTabIndex() {
    return -1;
  }
};
__decorate$1([
  s()
], SuggestionItem.prototype, "text", void 0);
__decorate$1([
  s()
], SuggestionItem.prototype, "additionalText", void 0);
__decorate$1([
  s()
], SuggestionItem.prototype, "markupText", void 0);
SuggestionItem = __decorate$1([
  m({
    tag: "ui5-suggestion-item",
    template: SuggestionItemTemplate,
    styles: [ListItemBase.styles, styles]
  })
], SuggestionItem);
SuggestionItem.define();
function ListItemGroupTemplate(hooks) {
  const items = hooks?.items || defaultItems;
  return jsxs("ul", { role: "group", class: "ui5-group-li-root", onDragEnter: this._ondragenter, onDragOver: this._ondragover, onDrop: this._ondrop, onDragLeave: this._ondragleave, children: [this.hasHeader && jsx(ListItemGroupHeader, { focused: this.focused, part: "header", accessibleRole: ListItemAccessibleRole.Group, children: this.hasFormattedHeader ? jsx("slot", { name: "header" }) : this.headerText }), items.call(this), jsx(DropIndicator, { orientation: "Horizontal", ownerReference: this })] });
}
function defaultItems() {
  return jsx("slot", {});
}
const r = (e) => e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
function a(r$1, e, s2, i) {
  return r$1.replaceAll(new RegExp(r(e), `${i ? "i" : ""}g`), s2);
}
function f(r2, e) {
  if (!r2 || !e) return r2;
  const s2 = (n) => {
    const [g, l] = n.split("");
    for (; r2.indexOf(n) >= 0 || e.indexOf(n) >= 0; ) n = `${g}${n}${l}`;
    return n;
  }, i = s2("12"), t = s2("34");
  let o = fnEncodeXML(a(r2, e, (n) => `${i}${n}${t}`, true));
  return [[i, "<b>"], [t, "</b>"]].forEach(([n, g]) => {
    o = a(o, n, g, false);
  }), o;
}
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r2 = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r2 = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r2 = (c < 3 ? d2(r2) : c > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
  return c > 3 && r2 && Object.defineProperty(target, key, r2), r2;
};
let SuggestionItemGroup = class SuggestionItemGroup2 extends ListItemGroup {
};
__decorate([
  d({
    "default": true,
    invalidateOnChildChange: true,
    type: HTMLElement
  })
], SuggestionItemGroup.prototype, "items", void 0);
SuggestionItemGroup = __decorate([
  m({
    tag: "ui5-suggestion-item-group",
    template: ListItemGroupTemplate
  })
], SuggestionItemGroup);
SuggestionItemGroup.define();
function InputSuggestionsTemplate(hooks) {
  const suggestionsList = hooks?.suggestionsList || defaultSuggestionsList;
  const valueStateMessage = hooks?.valueStateMessage;
  const valueStateMessageInputIcon = hooks?.valueStateMessageInputIcon;
  return jsxs(ResponsivePopover, { class: this.classes.popover, hideArrow: true, preventFocusRestore: true, preventInitialFocus: true, placement: "Bottom", horizontalAlign: "Start", tabindex: -1, style: this.styles.suggestionsPopover, onOpen: this._afterOpenPicker, onClose: this._afterClosePicker, onScroll: this._scroll, open: this.open, opener: this, accessibleName: this._popupLabel, children: [this._isPhone && jsxs(Fragment, { children: [jsxs("div", { slot: "header", class: "ui5-responsive-popover-header", children: [jsxs("div", { class: "row", children: [jsx("span", { children: this._headerTitleText }), jsx(Button, { class: "ui5-responsive-popover-close-btn", icon: decline, design: "Transparent", onClick: this._closePicker })] }), jsx("div", { class: "row", children: jsx("div", { class: "input-root-phone native-input-wrapper", children: jsx(Input, { class: "ui5-input-inner-phone", type: this.inputType, value: this.value, showClearIcon: this.showClearIcon, placeholder: this.placeholder, onInput: this._handleInput, onChange: this._handleChange }) }) })] }), this.hasValueStateMessage && jsxs("div", { class: this.classes.popoverValueState, style: this.styles.suggestionPopoverHeader, children: [jsx(Icon, { class: "ui5-input-value-state-message-icon", name: valueStateMessageInputIcon?.call(this) }), this.open && valueStateMessage?.call(this)] })] }), !this._isPhone && this.hasValueStateMessage && jsxs("div", { slot: "header", class: {
    "ui5-responsive-popover-header": true,
    ...this.classes.popoverValueState
  }, style: this.styles.suggestionPopoverHeader, children: [jsx(Icon, { class: "ui5-input-value-state-message-icon", name: valueStateMessageInputIcon?.call(this) }), this.open && valueStateMessage?.call(this)] }), suggestionsList.call(this), this._isPhone && jsx("div", { slot: "footer", class: "ui5-responsive-popover-footer", children: jsx(Button, { design: "Transparent", onClick: this._closePicker, children: this._suggestionsOkButtonText }) })] });
}
function defaultSuggestionsList() {
  return jsx(List, { accessibleRole: ListAccessibleRole.ListBox, separators: this.suggestionSeparators, selectionMode: "Single", onMouseDown: this.onItemMouseDown, onItemClick: this._handleSuggestionItemPress, onSelectionChange: this._handleSelectionChange, children: jsx("slot", {}) });
}
class Suggestions {
  get template() {
    return InputSuggestionsTemplate;
  }
  constructor(component, slotName, highlight, handleFocus) {
    this.component = component;
    this.slotName = slotName;
    this.handleFocus = handleFocus;
    this.highlight = highlight;
    this.selectedItemIndex = -1;
  }
  onUp(e, indexOfItem) {
    e.preventDefault();
    const index = !this.isOpened && this._hasValueState && indexOfItem === -1 ? 0 : indexOfItem;
    this._handleItemNavigation(false, index);
    return true;
  }
  onDown(e, indexOfItem) {
    e.preventDefault();
    const index = !this.isOpened && this._hasValueState && indexOfItem === -1 ? 0 : indexOfItem;
    this._handleItemNavigation(true, index);
    return true;
  }
  onSpace(e) {
    if (this._isItemOnTarget()) {
      e.preventDefault();
      this.onItemSelected(
        this._selectedItem,
        true
        /* keyboardUsed */
      );
      return true;
    }
    return false;
  }
  onEnter(e) {
    if (this._isGroupItem) {
      e.preventDefault();
      return false;
    }
    if (this._isItemOnTarget()) {
      this.onItemSelected(
        this._selectedItem,
        true
        /* keyboardUsed */
      );
      return true;
    }
    return false;
  }
  onPageUp(e) {
    e.preventDefault();
    const isItemIndexValid = this.selectedItemIndex - 10 > -1;
    this._moveItemSelection(this.selectedItemIndex, isItemIndexValid ? this.selectedItemIndex -= 10 : this.selectedItemIndex = 0);
    return true;
  }
  onPageDown(e) {
    e.preventDefault();
    const items = this._getItems();
    if (!items) {
      return true;
    }
    const lastItemIndex = items.length - 1;
    const isItemIndexValid = this.selectedItemIndex + 10 <= lastItemIndex;
    this._moveItemSelection(this.selectedItemIndex, isItemIndexValid ? this.selectedItemIndex += 10 : this.selectedItemIndex = lastItemIndex);
    return true;
  }
  onHome(e) {
    e.preventDefault();
    this._moveItemSelection(this.selectedItemIndex, this.selectedItemIndex = 0);
    return true;
  }
  onEnd(e) {
    e.preventDefault();
    const lastItemIndex = this._getItems().length - 1;
    if (!lastItemIndex) {
      return true;
    }
    this._moveItemSelection(this.selectedItemIndex, this.selectedItemIndex = lastItemIndex);
    return true;
  }
  onTab() {
    if (this._isItemOnTarget()) {
      this.onItemSelected(this._selectedItem, true);
      return true;
    }
    return false;
  }
  toggle(bToggle, options) {
    const toggle = bToggle !== void 0 ? bToggle : !this.isOpened();
    if (toggle) {
      this._getComponent().open = true;
    } else {
      this.close(options.preventFocusRestore);
    }
  }
  get _selectedItem() {
    return this._getNonGroupItems().find((item) => item.selected);
  }
  _isScrollable() {
    const sc = this._getScrollContainer();
    return sc.offsetHeight < sc.scrollHeight;
  }
  close(preventFocusRestore = false) {
    const selectedItem = this._getItems() && this._getItems()[this.selectedItemIndex];
    this._getComponent().open = false;
    const picker = this._getPicker();
    picker.preventFocusRestore = preventFocusRestore;
    picker.open = false;
    if (selectedItem && selectedItem.focused) {
      selectedItem.focused = false;
    }
  }
  updateSelectedItemPosition(pos) {
    this.selectedItemIndex = pos;
  }
  onItemSelected(selectedItem, keyboardUsed) {
    const item = selectedItem;
    const nonGroupItems = this._getNonGroupItems();
    if (!item) {
      return;
    }
    this.accInfo = {
      isGroup: item.hasAttribute("ui5-suggestion-item-group"),
      currentPos: nonGroupItems.indexOf(item) + 1,
      listSize: nonGroupItems.length,
      itemText: item.text || "",
      additionalText: item.additionalText
    };
    this._getComponent().onItemSelected(item, keyboardUsed);
    this._getComponent().open = false;
  }
  onItemSelect(item) {
    this._getComponent().onItemSelect(item);
  }
  /* Private methods */
  // Note: Split into two separate handlers
  onItemPress(e) {
    let pressedItem;
    const isPressEvent = e.type === "ui5-item-click";
    if (isPressEvent && !e.detail.item.selected || this._handledPress && !isPressEvent) {
      return;
    }
    if (isPressEvent && e.detail.item.selected) {
      pressedItem = e.detail.item;
      this._handledPress = true;
    } else {
      pressedItem = e.detail.selectedItems[0];
    }
    this.onItemSelected(
      pressedItem,
      false
      /* keyboardUsed */
    );
  }
  _onClose() {
    this._handledPress = false;
  }
  _isItemOnTarget() {
    return this.isOpened() && this.selectedItemIndex !== null && this.selectedItemIndex !== -1 && !this._isGroupItem;
  }
  get _isGroupItem() {
    const items = this._getItems();
    if (!items || !items[this.selectedItemIndex]) {
      return false;
    }
    return items[this.selectedItemIndex].hasAttribute("ui5-suggestion-item-group");
  }
  isOpened() {
    return !!this._getPicker()?.open;
  }
  _handleItemNavigation(forward, index) {
    this.selectedItemIndex = index;
    if (!this._getItems().length) {
      return;
    }
    if (forward) {
      this._selectNextItem();
    } else {
      this._selectPreviousItem();
    }
  }
  _selectNextItem() {
    const itemsCount = this._getItems().length;
    const previousSelectedIdx = this.selectedItemIndex;
    if (previousSelectedIdx !== -1 && previousSelectedIdx + 1 > itemsCount - 1) {
      return;
    }
    this._moveItemSelection(previousSelectedIdx, ++this.selectedItemIndex);
  }
  _selectPreviousItem() {
    const items = this._getItems();
    const previousSelectedIdx = this.selectedItemIndex;
    if (previousSelectedIdx === -1 || previousSelectedIdx === null) {
      return;
    }
    if (previousSelectedIdx - 1 < 0) {
      if (items[previousSelectedIdx].hasAttribute("ui5-suggestion-item") || items[previousSelectedIdx].hasAttribute("ui5-suggestion-item-custom")) {
        items[previousSelectedIdx].selected = false;
      }
      items[previousSelectedIdx].focused = false;
      this.component.focused = true;
      this.component.hasSuggestionItemSelected = false;
      this.selectedItemIndex -= 1;
      return;
    }
    this._moveItemSelection(previousSelectedIdx, --this.selectedItemIndex);
  }
  _moveItemSelection(previousIdx, nextIdx) {
    const items = this._getItems();
    const currentItem = items[nextIdx];
    const previousItem = items[previousIdx];
    const nonGroupItems = this._getNonGroupItems();
    const isGroupItem = currentItem.hasAttribute("ui5-suggestion-item-group");
    if (!currentItem) {
      return;
    }
    this.component.focused = false;
    const selectedItem = this._getItems()[this.selectedItemIndex];
    this.accInfo = {
      isGroup: isGroupItem,
      currentPos: items.indexOf(currentItem) + 1,
      itemText: (isGroupItem ? selectedItem.headerText : selectedItem.text) || ""
    };
    if (currentItem.hasAttribute("ui5-suggestion-item") || currentItem.hasAttribute("ui5-suggestion-item-custom")) {
      this.accInfo.additionalText = currentItem.additionalText || "";
      this.accInfo.currentPos = nonGroupItems.indexOf(currentItem) + 1;
      this.accInfo.listSize = nonGroupItems.length;
    }
    if (previousItem) {
      previousItem.focused = false;
    }
    if (previousItem?.hasAttribute("ui5-suggestion-item") || previousItem?.hasAttribute("ui5-suggestion-item-custom")) {
      previousItem.selected = false;
    }
    if (currentItem) {
      currentItem.focused = true;
      if (!isGroupItem) {
        currentItem.selected = true;
      }
      if (this.handleFocus) {
        currentItem.focus();
      }
    }
    this.component.hasSuggestionItemSelected = true;
    this.onItemSelect(currentItem);
    if (!this._isItemIntoView(currentItem)) {
      const itemRef = this._isGroupItem ? currentItem.shadowRoot.querySelector("[ui5-li-group-header]") : currentItem;
      this._scrollItemIntoView(itemRef);
    }
  }
  _deselectItems() {
    const items = this._getItems();
    items.forEach((item) => {
      if (item.hasAttribute("ui5-suggestion-item")) {
        item.selected = false;
      }
      item.focused = false;
    });
  }
  _clearItemFocus() {
    const focusedItem = this._getItems().find((item) => item.focused);
    if (focusedItem) {
      focusedItem.focused = false;
    }
  }
  _isItemIntoView(item) {
    const rectItem = item.getDomRef().getBoundingClientRect();
    const rectInput = this._getComponent().getDomRef().getBoundingClientRect();
    const windowHeight = window.innerHeight || document.documentElement.clientHeight;
    let headerHeight = 0;
    if (this._hasValueState) {
      const valueStateHeader = this._getPicker().querySelector("[slot=header]");
      headerHeight = valueStateHeader.getBoundingClientRect().height;
    }
    return rectItem.top + Suggestions.SCROLL_STEP <= windowHeight && rectItem.top >= rectInput.top + headerHeight;
  }
  _scrollItemIntoView(item) {
    item.scrollIntoView({
      behavior: "auto",
      block: "nearest",
      inline: "nearest"
    });
  }
  _getScrollContainer() {
    if (!this._scrollContainer) {
      this._scrollContainer = this._getPicker().shadowRoot.querySelector(".ui5-popup-content");
    }
    return this._scrollContainer;
  }
  /**
   * Returns the items in 1D array.
   *
   */
  _getItems() {
    const suggestionComponent = this._getComponent();
    return suggestionComponent.getSlottedNodes("suggestionItems").flatMap((item) => {
      return item.hasAttribute("ui5-suggestion-item-group") ? [item, ...item.items] : [item];
    });
  }
  _getNonGroupItems() {
    return this._getItems().filter((item) => !item.hasAttribute("ui5-suggestion-item-group"));
  }
  _getComponent() {
    return this.component;
  }
  _getList() {
    return this._getPicker().querySelector("[ui5-list]");
  }
  _getListWidth() {
    return this._getList()?.offsetWidth;
  }
  _getPicker() {
    return this._getComponent().shadowRoot.querySelector("[ui5-responsive-popover]");
  }
  get itemSelectionAnnounce() {
    if (!this.accInfo) {
      return "";
    }
    if (this.accInfo.isGroup) {
      return `${Suggestions.i18nBundle.getText(LIST_ITEM_GROUP_HEADER)} ${this.accInfo.itemText}`;
    }
    const itemPositionText = Suggestions.i18nBundle.getText(LIST_ITEM_POSITION, this.accInfo.currentPos || 0, this.accInfo.listSize || 0);
    return `${this.accInfo.additionalText} ${itemPositionText}`;
  }
  hightlightInput(text, input) {
    return f(text, input);
  }
  get _hasValueState() {
    return this.component.hasValueStateMessage;
  }
  _clearSelectedSuggestionAndaccInfo() {
    this.accInfo = void 0;
    this.selectedItemIndex = 0;
  }
}
Suggestions.SCROLL_STEP = 60;
Input.SuggestionsClass = Suggestions;
export {
  Suggestions as default
};
