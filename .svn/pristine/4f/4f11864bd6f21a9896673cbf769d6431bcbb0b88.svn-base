"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const express = require("express");
const axios = require("axios");
const fs = require("fs");
const path = require("node:path");
const node_url = require("node:url");
const fastXmlParser = require("fast-xml-parser");
const PLANT = "C200";
const __filename$1 = node_url.fileURLToPath(require("url").pathToFileURL(__filename).href);
const __dirname$1 = path.dirname(__filename$1);
function isDevMode() {
  const isPackaged = process.env.ELECTRON_IS_DEV === "0" || process.defaultApp === void 0;
  return !isPackaged || process.env.NODE_ENV === "development";
}
function getConfigPath() {
  return isDevMode() ? path.resolve(__dirname$1, "../../public/Config.xml") : path.join(process.resourcesPath, "public", "Config.xml");
}
const CONFIG_XML = getConfigPath();
function readXmlSafe(filePath) {
  try {
    if (!fs.existsSync(filePath)) return null;
    const xml = fs.readFileSync(filePath, "utf-8");
    const parser = new fastXmlParser.XMLParser({
      ignoreAttributes: false,
      parseTagValue: true,
      parseAttributeValue: true,
      trimValues: true
    });
    return parser.parse(xml);
  } catch (e) {
    console.warn("[SAP] XML read/parse failed:", e?.message || e);
    return null;
  }
}
function loadSapFromXml() {
  const json = readXmlSafe(CONFIG_XML);
  const sap = json?.SETTING?.SAP;
  const common = json?.SETTING?.Common || json?.SETTING?.COMMON || {};
  if (!sap) return null;
  const norm = (v, d = "") => typeof v === "string" ? v.trim() : v ?? d;
  const apiBase = norm(sap.API_BASE, "https://api.us20.dmc.cloud.sap").replace(
    /\/+$/,
    ""
  );
  return {
    tokenUrl: norm(sap.TOKEN_URL, ""),
    clientId: norm(sap.CLIENT_ID, ""),
    clientSecret: norm(sap.CLIENT_SECRET, ""),
    apiBase,
    plant: norm(sap.PLANT, "") || norm(common.PLANT_CD, "") || norm(common.PLANT, "") || PLANT
  };
}
let xmlSap = loadSapFromXml() || {};
let API_BASE = xmlSap.apiBase || "https://api.us20.dmc.cloud.sap";
xmlSap.plant || PLANT;
const api = (p) => `${API_BASE}${p.startsWith("/") ? p : `/${p}`}`;
function buildSAPConfig() {
  return {
    // 🔐 토큰 설정 (XML 우선)
    tokenUrl: xmlSap.tokenUrl || "",
    clientId: xmlSap.clientId || "",
    clientSecret: xmlSap.clientSecret || "",
    // ✅ API_BASE 적용된 엔드포인트들
    acceptUrl: api("/logistics/v1/execution/acceptLogisticsOrder"),
    confirmUrl: api("/logistics/v1/execution/confirmLogisticsOrder"),
    pickUrl: api("/logistics/v1/execution/pickLogisticsOrder"),
    SFC_START_API: api("/sfc/v1/sfcs/start"),
    SFC_CONFIRM_API: api("/sfc/v1/sfcs/complete"),
    POST_ASSEMBLED_COMPONENT_API: api("/assembly/v1/assembledComponents"),
    POST_ASSEMBLED_COMPONENT_AUTO_API: api("/assembly/v1/autoAssemble"),
    SFC_DETAIL_API: api("/sfc/v1/sfcdetail"),
    ROUTING_API: api("/routing/v1/routings"),
    BOM_API: api("/bom/v1/boms"),
    ASSEMBLE_COMPLETED: api("/assembly/v1/assembledComponents"),
    INVENTORIES_API: api("/inventory/v1/inventories"),
    GOODS_ISSUE_I_API: api("/processorder/v1/goodsissue"),
    GOODS_ISSUE_Q_API: api("/inventory/v1/inventory/goodsIssues"),
    GOODSRECEIPTS_API_Q: api("/inventory/v1/inventory/goodsReceipts"),
    GOODSRECEIPTS_API_I: api("/inventory/v1/inventory/erpGoodsReceipts"),
    UNIT_CODE_API: api("/uom/v2/uoms"),
    POST_QTY_CONFIRM: api("/quantityConfirmation/v1/confirm"),
    POST_QTY_FINAL_CONFIRM: api(
      "/quantityConfirmation/v1/reportOperationActivityFinalConfirmation"
    ),
    POST_AUTOCONFIRM: api("/activityConfirmation/v1/autoconfirm"),
    POST_ACTIVITY_CONFIRM: api("/activityConfirmation/v1/confirm"),
    GET_POSTINGS: api("/activityConfirmation/v1/postings/details"),
    CANCEL_GOODSRECEIPTS: api("/inventory/v1/inventory/goodsReceipts/cancel"),
    CANCEL_GOODSISSUE: api("/processorder/v1/goodsissue/cancellations"),
    GET_ORDER_LIST: api("/order/v1/orders/list"),
    POST_ORDER_RELEASE: api("/order/v2/orders/release"),
    PUT_ALTER_RESOURCE: api("/sfc/v1/alternateResource"),
    GET_STANDARDVALUE: api("/standardValue/v1/details"),
    GET_TIMEZONE: api("/plant/v1/plants")
  };
}
let SAP_CONFIG = buildSAPConfig();
let accessToken = null;
function getAccessToken() {
  return accessToken;
}
async function refreshToken() {
  try {
    if (!SAP_CONFIG.tokenUrl || !SAP_CONFIG.clientId || !SAP_CONFIG.clientSecret) {
      throw new Error(
        "SAP token config missing (TOKEN_URL / CLIENT_ID / CLIENT_SECRET)"
      );
    }
    const rsp = await axios.post(
      SAP_CONFIG.tokenUrl,
      new URLSearchParams({ grant_type: "client_credentials" }),
      {
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        auth: {
          username: SAP_CONFIG.clientId,
          password: SAP_CONFIG.clientSecret
        }
      }
    );
    accessToken = rsp.data.access_token;
    console.log(`[TOKEN] refreshed @ ${(/* @__PURE__ */ new Date()).toISOString()}`);
    return accessToken;
  } catch (err) {
    accessToken = null;
    console.error("[TOKEN] refresh failed:", err?.message || err);
    throw err;
  }
}
let inflight = null;
async function ensureToken() {
  if (accessToken) return accessToken;
  if (!inflight) inflight = refreshToken().finally(() => inflight = null);
  await inflight;
  if (!accessToken) throw new Error("ensureToken: failed to acquire SAP token");
  return accessToken;
}
const router = express.Router();
router.post("/sap-start", async (req, res) => {
  const { plant, operation, resource, sfcs, processLot } = req.body;
  if (!Array.isArray(sfcs) || sfcs.length === 0)
    return res.status(400).json({ error: "sfcs 배열이 필요합니다." });
  if (!operation || !resource)
    return res.status(400).json({ error: "operation / resource 파라미터 누락" });
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token)
      return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    const payload = {
      plant,
      operation,
      resource,
      sfcs,
      ...processLot ? { processLot } : {}
    };
    console.log("📡 [SAP START 요청]:", payload);
    const sapResp = await axios.post(SAP_CONFIG.SFC_START_API, payload, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data;
    console.log("✅ [SAP 응답]:", data);
    if (!Array.isArray(data.sfcs) || data.sfcs.length === 0) {
      return res.status(204).json({ description: "SAP 응답에 처리할 SFC 없음" });
    }
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP START 호출 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL",
      error: "SAP START 호출 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.post("/sap-complete", async (req, res) => {
  const { plant, operation, resource, sfcs, quantity, processLot } = req.body;
  if (!Array.isArray(sfcs) || sfcs.length === 0)
    return res.status(400).json({ error: "complete sfcs 배열이 필요합니다." });
  if (!operation || !resource)
    return res.status(400).json({ error: " complete operation / resource 파라미터 누락" });
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token)
      return res.status(500).json({ error: "complete SAP 토큰 발급 실패" });
    const payload = {
      plant,
      operation,
      resource,
      sfcs,
      quantity,
      ...processLot ? { processLot } : {}
    };
    console.log("📡 [SAP complete 요청]:", payload);
    const sapResp = await axios.post(SAP_CONFIG.SFC_CONFIRM_API, payload, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data;
    console.log("✅ [complete SAP 응답]:", data);
    if (!Array.isArray(data.sfcs) || data.sfcs.length === 0) {
      return res.status(204).json({ description: "complete SAP 응답에 처리할 SFC 없음" });
    }
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [complete SAP START 호출 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "complete SAP_CALL",
      error: "complete AP START 호출 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.post("/sap-complete", async (req, res) => {
  const { plant, operation, resource, sfcs, processLot } = req.body;
  if (!Array.isArray(sfcs) || sfcs.length === 0)
    return res.status(400).json({ error: "complete sfcs 배열이 필요합니다." });
  if (!operation || !resource)
    return res.status(400).json({ error: " complete operation / resource 파라미터 누락" });
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token)
      return res.status(500).json({ error: "complete SAP 토큰 발급 실패" });
    const payload = {
      plant,
      operation,
      resource,
      sfcs,
      ...processLot ? { processLot } : {}
    };
    console.log("📡 [SAP complete 요청]:", payload);
    const sapResp = await axios.post(SAP_CONFIG.SFC_CONFIRM_API, payload, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data;
    console.log("✅ [complete SAP 응답]:", data);
    if (!Array.isArray(data.sfcs) || data.sfcs.length === 0) {
      return res.status(204).json({ description: "complete SAP 응답에 처리할 SFC 없음" });
    }
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [complete SAP 호출 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "complete SAP_CALL",
      error: "complete AP START 호출 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.post("/sap-post-assembled", async (req, res) => {
  const {
    plant,
    sfc,
    operationActivity,
    component,
    componentVersion,
    quantity,
    resource,
    sequence
  } = req.body;
  if (!plant || !sfc || !operationActivity || !component || !componentVersion || !quantity || !resource) {
    return res.status(400).json({ error: "필수 파라미터 누락" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      plant,
      sfc,
      operationActivity,
      component,
      componentVersion,
      quantity,
      resource,
      sequence
    };
    console.log("📡 [SAP AssembledComponents POST] Payload:", payload);
    const sapResponse = await axios.post(
      SAP_CONFIG.POST_ASSEMBLED_COMPONENT_API,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    return res.status(200).json(sapResponse.data);
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP 호출 실패:", msg);
    return res.status(502).json({
      error: "SAP assembledComponents 호출 실패",
      message: msg
    });
  }
});
router.post("/sap-post-goodsissue", async (req, res) => {
  const {
    plant,
    order,
    phase,
    workCenter,
    component,
    quantity,
    unitOfMeasure,
    postedBy,
    postingDateTime,
    bom,
    inventoryId
  } = req.body;
  if (!plant || !order || !phase || !workCenter || !component?.material?.material || !component?.material?.version || quantity == null || // 0도 허용
  !unitOfMeasure || !postedBy || !postingDateTime || !bom?.bom || !bom?.version || !inventoryId) {
    return res.status(400).json({ error: "필수 파라미터 누락 또는 잘못된 값" });
  }
  const payload = {
    plant,
    order,
    phase,
    workCenter,
    inventoryId,
    component,
    bom,
    isBomComponent: true,
    quantity,
    unitOfMeasure,
    postedBy,
    postingDateTime
  };
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    console.log("📡 [SAP Goods Issue POST] Payload:", payload);
    const sapResponse = await axios.post(
      SAP_CONFIG.GOODS_ISSUE_I_API,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    return res.status(200).json(sapResponse.data);
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP goodsissue 호출 실패:", {
      url: SAP_CONFIG.GOODS_ISSUE_I_API,
      status: err.response?.status,
      statusText: err.response?.statusText,
      data: err.response?.data,
      payload
    });
    return res.status(502).json({
      error: "SAP goodsissue 호출 실패",
      message: msg
    });
  }
});
router.post("/sap-cancel-goodsreceipt", async (req, res) => {
  const { plant, transactionIds } = req.body;
  if (!plant || !Array.isArray(transactionIds) || transactionIds.length === 0) {
    return res.status(400).json({ error: "필수 파라미터 누락 또는 잘못된 값" });
  }
  if (transactionIds.length > 10) {
    return res.status(400).json({ error: "최대 10개의 transactionIds만 허용됩니다." });
  }
  const payload = {
    plant,
    transactionIds
  };
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    console.log("📡 [SAP Cancel GoodsReceipt] Payload:", payload);
    const sapResponse = await axios.post(
      SAP_CONFIG.CANCEL_GOODSRECEIPTS,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    return res.status(200).json(sapResponse.data);
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP Cancel GoodsReceipt 실패:", {
      url: SAP_CONFIG.CANCEL_GOODSRECEIPTS,
      status: err.response?.status,
      statusText: err.response?.statusText,
      data: err.response?.data,
      payload
    });
    return res.status(502).json({
      error: "SAP Cancel GoodsReceipt 호출 실패",
      message: msg
    });
  }
});
router.post("/sap-post-assembled_auto", async (req, res) => {
  const {
    plant,
    sfcs,
    operationActivity,
    quantity,
    resource,
    hasTimeBased,
    hasNonTimeBased
  } = req.body;
  if (!plant || !Array.isArray(sfcs) || sfcs.length === 0 || !operationActivity || !quantity || !resource) {
    return res.status(400).json({ error: "필수 파라미터 누락 또는 형식 오류" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      plant,
      operationActivity,
      quantity,
      resource,
      sfcs,
      hasTimeBased: hasTimeBased ?? true,
      // 기본값 포함
      hasNonTimeBased: hasNonTimeBased ?? true
      // 기본값 포함
    };
    console.log("📡 [SAP assembled_auto POST] Payload:", payload);
    const sapResponse = await axios.post(
      SAP_CONFIG.POST_ASSEMBLED_COMPONENT_AUTO_API,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    return res.status(200).json(sapResponse.data);
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP 호출 실패:", msg);
    return res.status(502).json({
      error: "SAP assembled_auto 호출 실패",
      message: msg
    });
  }
});
router.post("/sap-goods-receipt", async (req, res) => {
  const { plant, order, postedBy, lineItems } = req.body;
  if (!plant || !order || !lineItems || !Array.isArray(lineItems) || lineItems.length === 0) {
    return res.status(400).json({ error: "필수 파라미터 누락 (plant, order, lineItems)" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      plant,
      order,
      // postedBy: postedBy || "system", // 선택사항 기본값
      lineItems: lineItems.map((item) => ({
        material: item.material,
        materialVersion: item.materialVersion || void 0,
        postingDate: item.postingDate,
        postingDateTime: item.postingDateTime || void 0,
        quantity: {
          unitOfMeasure: {
            commercialUnitOfMeasure: item.quantity.unitOfMeasure?.commercialUnitOfMeasure || "",
            internalUnitOfMeasure: item.quantity.unitOfMeasure?.internalUnitOfMeasure || "",
            isoUnitOfMeasure: item.quantity.unitOfMeasure?.isoUnitOfMeasure || ""
          },
          value: item.quantity.value
        },
        sfc: item.sfc,
        storageLocation: item.storageLocation
      }))
    };
    console.log("📡 [SAP GoodsReceipt POST] Payload:", JSON.stringify(payload, null, 2));
    const sapResponse = await axios.post(
      SAP_CONFIG.GOODSRECEIPTS_API_I,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    return res.status(200).json(sapResponse.data);
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP GoodsReceipt 호출 실패:", msg);
    return res.status(502).json({
      error: "SAP goodsReceipts 호출 실패",
      message: msg
    });
  }
});
router.post("/sap-post-qty-confirm", async (req, res) => {
  const {
    plant,
    shopOrder,
    sfc,
    operationActivity,
    workCenter,
    yieldQuantity,
    yieldQuantityUnit,
    yieldQuantityIsoUnit,
    isFinalConfirmation = false
    // ✅ 기본값 처리
  } = req.body;
  if (!plant || !shopOrder || !sfc || !operationActivity || !workCenter || !yieldQuantity || !yieldQuantityUnit || !yieldQuantityIsoUnit) {
    return res.status(400).json({
      error: "필수 파라미터 누락",
      missing: {
        plant: !!plant,
        shopOrder: !!shopOrder,
        sfc: !!sfc,
        operationActivity: !!operationActivity,
        workCenter: !!workCenter,
        yieldQuantity: !!yieldQuantity,
        yieldQuantityUnit: !!yieldQuantityUnit,
        yieldQuantityIsoUnit: !!yieldQuantityIsoUnit
      }
    });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      plant,
      shopOrder,
      sfc,
      operationActivity,
      workCenter,
      yieldQuantity,
      yieldQuantityUnit,
      yieldQuantityIsoUnit,
      finalConfirmation: isFinalConfirmation
    };
    console.log("📡 [SAP QuantityConfirm POST] Payload:", payload);
    const sapResponse = await axios.post(
      SAP_CONFIG.POST_QTY_CONFIRM,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    console.log("✅ [SAP 응답] QuantityConfirm 완료:", sapResponse.data);
    return res.status(200).json({
      status: "success",
      data: sapResponse.data
    });
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP QuantityConfirm 호출 실패:", msg);
    return res.status(502).json({
      error: "SAP QuantityConfirm 호출 실패",
      message: msg
    });
  }
});
router.post("/sap-post-autoconfirm", async (req, res) => {
  const {
    plant,
    shopOrder,
    sfc,
    operationActivity,
    operationActivityVersion,
    stepId,
    workCenter,
    resource,
    routingId,
    finalConfirmation = false,
    postConfirmationToErp = false,
    postedBy,
    postingDateTime
  } = req.body;
  if (!plant || !shopOrder || !sfc || !operationActivity || !operationActivityVersion || !stepId || !workCenter || !resource || !routingId || !postedBy || !postingDateTime) {
    return res.status(400).json({
      error: "필수 파라미터 누락",
      missing: {
        plant: !!plant,
        shopOrder: !!shopOrder,
        sfc: !!sfc,
        operationActivity: !!operationActivity,
        operationActivityVersion: !!operationActivityVersion,
        stepId: !!stepId,
        workCenter: !!workCenter,
        resource: !!resource,
        routingId: !!routingId,
        postedBy: !!postedBy,
        postingDateTime: !!postingDateTime
      }
    });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      plant,
      shopOrder,
      sfc,
      operationActivity,
      operationActivityVersion,
      stepId,
      workCenter,
      resource,
      routingId,
      finalConfirmation,
      postConfirmationToErp,
      postedBy,
      postingDateTime
    };
    console.log("📡 [SAP AutoActivityConfirm POST] Payload:", payload);
    const sapResponse = await axios.post(
      SAP_CONFIG.POST_AUTOCONFIRM,
      // 'https://api.us20.dmc.cloud.sap/activityConfirmation/v1/autoconfirm'
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    console.log("✅ [SAP 응답] AutoActivityConfirm 완료:", sapResponse.data);
    return res.status(200).json({
      status: "success",
      data: sapResponse.data
    });
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP AutoActivityConfirm 호출 실패:", msg);
    return res.status(502).json({
      error: "SAP AutoActivityConfirm 호출 실패",
      message: msg
    });
  }
});
router.post("/sap-post-activity-confirm", async (req, res) => {
  const {
    plant,
    shopOrder,
    sfc,
    operationActivity,
    stepId,
    workCenter,
    activities = []
  } = req.body;
  if (!plant || !shopOrder || !operationActivity || !stepId || !workCenter || !activities.length) {
    return res.status(400).json({ error: "필수 파라미터 누락" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      plant,
      shopOrder,
      sfc,
      operationActivity,
      stepId,
      workCenter,
      finalConfirmation: true,
      // ⬅ 고정
      allowPostingsAfterOperationActivityComplete: true,
      // ⬅ 고정
      activities
    };
    console.log("📡 [SAP ActivityConfirm POST] Payload:", payload);
    const response = await axios.post(
      SAP_CONFIG.POST_ACTIVITY_CONFIRM,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    console.log("✅ SAP 응답:", response.data);
    return res.status(200).json({ status: "success", data: response.data });
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP ActivityConfirm 실패:", msg);
    return res.status(502).json({
      error: "SAP ActivityConfirm 호출 실패",
      message: msg
    });
  }
});
router.post("/sap-post-final-confirm", async (req, res) => {
  const { plant, shopOrder, sfc, operationActivity } = req.body;
  if (!plant || !shopOrder || !sfc || !operationActivity) {
    return res.status(400).json({
      error: "필수 파라미터 누락",
      missing: {
        plant: !!plant,
        shopOrder: !!shopOrder,
        sfc: !!sfc,
        operationActivity: !!operationActivity
      }
    });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      plant,
      shopOrder,
      sfc,
      operationActivity
    };
    console.log("📡 [SAP Final QuantityConfirm POST] Payload:", payload);
    const sapResponse = await axios.post(
      SAP_CONFIG.POST_QTY_FINAL_CONFIRM,
      // 'https://api.us20.dmc.cloud.sap/quantityConfirmation/v1/reportOperationActivityFinalConfirmation'
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    return res.status(200).json(sapResponse.data);
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP Final QuantityConfirm 호출 실패:", msg);
    return res.status(502).json({
      error: "SAP Final QuantityConfirm 호출 실패",
      message: msg
    });
  }
});
router.get("/sap/sfc-detail", async (req, res) => {
  const { plant_cd, sfc } = req.query;
  console.log("📡 [SAP] /sap/sfc-detail 호출됨:", { plant_cd, sfc });
  if (!plant_cd || !sfc) {
    return res.status(400).json({ error: "plant_cd 또는 sfc 파라미터 누락" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    console.log("🧪 SAP 토큰:", token?.slice(0, 50));
    if (!token) return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    const url = `${SAP_CONFIG.SFC_DETAIL_API}?plant=${plant_cd}&sfc=${sfc}`;
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data;
    console.log("✅ [SAP 응답]:", data);
    if (!data || !data.sfc || !data.status) {
      return res.status(204).json({ description: "SAP 응답에 SFC 정보 없음" });
    }
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP SFC_DETAIL 호출 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL",
      error: "SAP SFC_DETAIL 호출 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/routing-detail", async (req, res) => {
  const { plant, routing, type } = req.query;
  console.log("📡 [SAP] /sap/routing-detail 호출됨:", { plant, routing, type });
  if (!plant || !routing || !type) {
    return res.status(400).json({ error: "plant, routing, type 파라미터 누락" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    const url = `${SAP_CONFIG.ROUTING_API}?plant=${plant}&routing=${routing}&type=${type}`;
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data;
    console.log("✅ [SAP 응답 - Routing]:", data);
    if (!Array.isArray(data) || data.length === 0) {
      return res.status(204).json({ description: "SAP 응답이 비었거나 배열 아님" });
    }
    const routingInfo = data[0];
    if (!routingInfo.routingSteps || routingInfo.routingSteps.length === 0) {
      return res.status(204).json({ description: "routingSteps 없음" });
    }
    return res.status(200).json(routingInfo);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP Routing 조회 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_ROUTING",
      error: "SAP Routing 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/bom-detail", async (req, res) => {
  const { plant, bom, type } = req.query;
  console.log("📡 [SAP] /sap/bom-detail 호출됨:", { plant, bom, type });
  if (!plant || !bom || !type) {
    return res.status(400).json({ error: "plant, bom, type 파라미터 누락" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    const url = `${SAP_CONFIG.BOM_API}?plant=${plant}&bom=${encodeURIComponent(bom)}&type=${type}`;
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data;
    console.log("✅ [SAP 응답 - BOM]:", data);
    if (!Array.isArray(data) || data.length === 0) {
      return res.status(204).json({ description: "SAP 응답이 비었거나 배열 아님" });
    }
    const bomInfo = data[0];
    if (!bomInfo.components || bomInfo.components.length === 0) {
      return res.status(204).json({ description: "components 없음" });
    }
    return res.status(200).json(bomInfo);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP BOM 조회 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_BOM",
      error: "SAP BOM 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/assembled-components", async (req, res) => {
  const { plant, sfc, operationActivity } = req.query;
  console.log("📡 [SAP] /sap/assembled-components 호출됨:", { plant, sfc, operationActivity });
  if (!plant || !sfc || !operationActivity) {
    return res.status(400).json({ error: "plant, sfc, operationActivity 파라미터 누락" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    const url = `${SAP_CONFIG.ASSEMBLE_COMPLETED}?plant=${plant}&sfc=${sfc}&operationActivity=${operationActivity}`;
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data;
    console.log("✅ [SAP 응답 - Assembled Components]:", data);
    if (!Array.isArray(data) || data.length === 0) {
      return res.status(204).json({ description: "SAP 응답이 비었거나 배열 아님" });
    }
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP Assembled 조회 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_ASSEMBLED",
      error: "SAP Assembled Components 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/goodsissued-components", async (req, res) => {
  const { plant, material, materialVersion, order, sfc, workCenter } = req.query;
  console.log("📡 [SAP] /sap/goodsissued-components 호출됨:", {
    plant,
    material,
    materialVersion,
    order,
    sfc,
    workCenter
  });
  if (!plant || !material || !materialVersion || !order || !sfc || !workCenter) {
    return res.status(400).json({ error: "필수 파라미터 누락 (plant, material, materialVersion, order, sfc, workCenter)" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    const url = `${SAP_CONFIG.GOODS_ISSUE_Q_API}?plant=${plant}&material=${material}&materialVersion=${materialVersion}&order=${order}&sfc=${sfc}&workCenter=${workCenter}`;
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data?.content;
    console.log("✅ [SAP 응답 - Goods Issue 이력]:", data);
    if (!Array.isArray(data) || data.length === 0) {
      return res.status(204).json({ description: "SAP 응답이 비었거나 배열 아님" });
    }
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP Goods Issue 조회 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_GOODS_ISSUE",
      error: "SAP Goods Issue 내역 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/unit-codes", async (req, res) => {
  console.log("📡 [SAP] /sap/unit-codes 호출됨");
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    const unitCode = req.query.unitCode;
    const url = SAP_CONFIG.UNIT_CODE_API;
    const fullUrl = unitCode ? `${url}?unitCode=${encodeURIComponent(unitCode)}` : url;
    console.log("🌐 [SAP 요청 URL - UNIT CODE]:", fullUrl);
    const sapResp = await axios.get(fullUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const unitList = sapResp.data;
    console.log("✅ [SAP 응답 - Unit Codes]:", unitList);
    if (!unitList || Array.isArray(unitList) && unitList.length === 0) {
      return res.status(204).json({ message: "unit code 없음" });
    }
    return res.status(200).json(unitList);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP UNIT_CODE 호출 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_UNIT_CODE",
      error: "SAP 단위코드 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/inventories", async (req, res) => {
  const {
    plant,
    material,
    materialVersion,
    stockRetrieveScope,
    batchesWithStatus,
    status,
    storageLocation
  } = req.query;
  console.log("📡 [SAP] /sap/inventories 호출됨:", {
    plant,
    material,
    materialVersion,
    stockRetrieveScope,
    batchesWithStatus,
    status,
    storageLocation
  });
  if (!plant || !material || !materialVersion) {
    return res.status(400).json({
      error: "필수 파라미터 누락 (plant, material, materialVersion)"
    });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) {
      return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    }
    let url = `${SAP_CONFIG.INVENTORIES_API}?plant=${plant}&material=${material}&materialVersion=${materialVersion}&stockRetrieveScope=${stockRetrieveScope}&batchesWithStatus=${batchesWithStatus}&storageLocation=${encodeURIComponent(storageLocation)}`;
    const statusList = Array.isArray(status) ? status : [status];
    for (const s of statusList) {
      url += `&status=${s}`;
    }
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data?.content;
    console.log("✅ [SAP 응답 - Inventories]:", data?.length ?? 0);
    if (!Array.isArray(data) || data.length === 0) {
      return res.status(204).json({ description: "SAP 응답이 비었거나 배열 아님" });
    }
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP INVENTORY 조회 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_INVENTORIES",
      error: "SAP 재고 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/goodsreceipts", async (req, res) => {
  const { plant, order, sfc, material } = req.query;
  console.log("📡 [SAP] /sap/goodsreceipts 호출됨:", {
    plant,
    order,
    sfc,
    material
  });
  if (!plant || !order && !sfc) {
    return res.status(400).json({
      error: "필수 파라미터 누락 (plant는 필수이며, order 또는 sfc 중 하나는 반드시 필요함)"
    });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) {
      return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    }
    let url = `${SAP_CONFIG.GOODSRECEIPTS_API_Q}?plant=${plant}`;
    if (order) url += `&order=${encodeURIComponent(order)}`;
    if (sfc) url += `&sfc=${encodeURIComponent(sfc)}`;
    if (material) url += `&material=${encodeURIComponent(material)}`;
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data?.content;
    console.log("✅ [SAP 응답 - GoodsReceipt]:", data?.length ?? 0);
    if (!Array.isArray(data) || data.length === 0) {
      return res.status(204).json({ description: "SAP 응답이 비었거나 배열 아님" });
    }
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP GoodsReceipt 조회 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_GOODSRECEIPTS",
      error: "SAP 입고 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/standard-value", async (req, res) => {
  const {
    plant,
    workCenter,
    operationActivity,
    operationActivityVersion,
    object,
    objectType,
    objectVersion
  } = req.query;
  console.log("📡 [SAP] /sap/standard-value 호출됨:", {
    plant,
    workCenter,
    operationActivity,
    operationActivityVersion,
    object,
    objectType,
    objectVersion
  });
  if (!plant || !workCenter || !operationActivity || !operationActivityVersion || !object || !objectType || !objectVersion) {
    return res.status(400).json({
      error: "필수 파라미터 누락 (plant, workCenter, operationActivity, operationActivityVersion, object, objectType, objectVersion 모두 필요)"
    });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) {
      return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    }
    const baseUrl = SAP_CONFIG.GET_STANDARDVALUE;
    let url = `${baseUrl}?plant=${encodeURIComponent(plant)}`;
    url += `&workCenter=${encodeURIComponent(workCenter)}`;
    url += `&operationActivity=${encodeURIComponent(operationActivity)}`;
    url += `&operationActivityVersion=${encodeURIComponent(operationActivityVersion)}`;
    url += `&object=${encodeURIComponent(object)}`;
    url += `&objectType=${encodeURIComponent(objectType)}`;
    url += `&objectVersion=${encodeURIComponent(objectVersion)}`;
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const data = sapResp.data;
    if (!data || !Array.isArray(data.standardValueCollectionList) || data.standardValueCollectionList.length === 0) {
      console.warn("⚠️ SAP 응답에 standardValueCollectionList 없음 또는 빈 배열");
      return res.status(204).json({ description: "SAP 응답 없음" });
    }
    console.log("✅ [SAP 응답 - 표준시간 항목 수]:", data.standardValueCollectionList.length);
    console.log("✅ [SAP 응답 - 표준시간 항목 수]:", data.standardValueCollectionList);
    return res.status(200).json(data);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP StandardValue 조회 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_STANDARDVALUE",
      error: "SAP 표준시간(Standard Value) 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/plant-timezone", async (req, res) => {
  const plant = String(req.query.plant ?? "").trim();
  if (!plant) return res.status(400).json({ error: "plant 파라미터가 필요합니다." });
  try {
    const token = await ensureToken();
    const url = `${SAP_CONFIG.GET_TIMEZONE}?plant=${encodeURIComponent(plant)}`;
    const resp = await axios.get(url, {
      headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" }
    });
    const body = resp.data;
    const first = (Array.isArray(body) ? body[0] : body) ?? {};
    const timeZone = first.timeZone ?? first.timezone ?? null;
    const etpTimezone = first.etpTimezone ?? first.etpTimeZone ?? null;
    const dateHeader = resp.headers?.date ?? null;
    const serverNowUtcIso = dateHeader ? new Date(dateHeader).toISOString() : null;
    const serverNowEpochMs = dateHeader ? Date.parse(dateHeader) : null;
    let serverNowInPlantTz = null;
    if (timeZone && dateHeader) {
      try {
        const d = new Date(dateHeader);
        serverNowInPlantTz = new Intl.DateTimeFormat("sv-SE", {
          timeZone,
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
          hour12: false
        }).format(d).replace(" ", " ");
      } catch {
      }
    }
    return res.status(200).json({
      plant,
      apiUrl: url,
      timeZone,
      etpTimezone,
      header: { date: dateHeader, serverNowUtcIso, serverNowEpochMs, serverNowInPlantTz },
      raw: first
    });
  } catch (e) {
    const apiErr = e?.response?.data?.error;
    console.error("❌ [SAP GET_TIMEZONE 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_GET_TIMEZONE",
      error: "SAP Plant 타임존 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
router.post("/sap/order-release", async (req, res) => {
  const { plant, order } = req.body;
  console.log("📡 [SAP] /sap/order-release 호출됨:", { plant, order });
  if (!plant || !order) {
    return res.status(400).json({
      error: "필수 파라미터 누락",
      missing: {
        plant: !!plant,
        order: !!order
      }
    });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      plant,
      order
    };
    console.log("📦 [SAP 주문 릴리스 요청 Payload]:", payload);
    const sapResponse = await axios.post(
      SAP_CONFIG.POST_ORDER_RELEASE,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    console.log("✅ [SAP 응답] 주문 릴리스 성공:", sapResponse.data);
    return res.status(200).json({
      status: "success",
      data: sapResponse.data
    });
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP 주문 릴리스 호출 실패:", msg);
    return res.status(502).json({
      error: "SAP 주문 릴리스 호출 실패",
      message: msg
    });
  }
});
router.put("/sap/alternate-resource", async (req, res) => {
  const { plant } = req.query;
  const { operationActivity, resource, sfc, workCenter } = req.body;
  console.log("📡 [SAP] /sap/alternate-resource 호출됨:", { plant, operationActivity, resource, sfc, workCenter });
  if (!plant || !operationActivity || !resource || !sfc || !workCenter) {
    return res.status(400).json({
      error: "필수 파라미터 누락",
      missing: {
        plant: !!plant,
        operationActivity: !!operationActivity,
        resource: !!resource,
        sfc: !!sfc,
        workCenter: !!workCenter
      }
    });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    console.log("🧪 현재 SAP 토큰:", token);
    if (!token) return res.status(500).json({ error: "SAP 토큰 없음" });
    const payload = {
      operationActivity,
      resource,
      sfc,
      workCenter
    };
    console.log("📦 [SAP 요청 Payload]:", payload);
    const response = await axios.put(
      `${SAP_CONFIG.PUT_ALTER_RESOURCE}?plant=${encodeURIComponent(plant)}`,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      }
    );
    console.log("✅ SAP 리소스 변경 완료:", response.data);
    return res.status(200).json({
      status: "success",
      data: response.data
    });
  } catch (err) {
    const msg = err.response?.data?.error?.message || err.message;
    console.error("❌ SAP 리소스 변경 실패:", msg);
    return res.status(502).json({
      error: "SAP 리소스 변경 실패",
      message: msg
    });
  }
});
const qstr = (v) => Array.isArray(v) ? String(v[0]) : v == null ? "" : String(v);
const qnum = (v) => {
  const n = Number(Array.isArray(v) ? v[0] : v);
  return Number.isFinite(n) ? n : void 0;
};
router.get("/sap/order-list2", async (req, res) => {
  const plant = qstr(req.query.plant);
  const releaseStatuses = qstr(req.query.releaseStatuses);
  const workCenter = qstr(req.query.workCenter);
  const order = qstr(req.query.order);
  const limit = qnum(req.query.limit);
  console.log("📡 [SAP] /sap/order-list2 호출됨:", { plant, releaseStatuses, workCenter, order, limit });
  if (!plant) {
    return res.status(400).json({ error: "필수 파라미터 누락 (plant 필수)" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    let url = `${SAP_CONFIG.GET_ORDER_LIST}?plant=${encodeURIComponent(plant)}`;
    if (workCenter) url += `&workCenters=${encodeURIComponent(workCenter)}`;
    if (releaseStatuses) url += `&releaseStatuses=${encodeURIComponent(releaseStatuses)}`;
    if (order) {
      url += `&orderNumbers=${encodeURIComponent(order)}`;
      url += `&order=${encodeURIComponent(order)}`;
    }
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    let content = Array.isArray(sapResp.data?.content) ? sapResp.data.content : [];
    console.log("✅ [SAP 응답 - Order List]:", content.length);
    if (order) content = content.filter((o) => String(o?.order) === order);
    if (typeof limit === "number") content = content.slice(0, limit);
    if (!Array.isArray(content) || content.length === 0) {
      return res.status(204).json({ description: "SAP 응답이 비었거나 배열 아님" });
    }
    return res.status(200).json(content);
  } catch (e) {
    const apiErr = e?.response?.data?.error;
    console.error("❌ [SAP Order List 조회 실패]:", apiErr?.message || e?.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_ORDER_LIST",
      error: "SAP 주문 리스트 조회 실패",
      details: apiErr?.message || e?.message,
      code: apiErr?.code || null
    });
  }
});
router.get("/sap/order-list", async (req, res) => {
  const { plant, releaseStatuses, workCenter } = req.query;
  console.log("📡 [SAP] /sap/order-list 호출됨:", {
    plant,
    releaseStatuses,
    workCenter
  });
  if (!plant || !workCenter) {
    return res.status(400).json({ error: "필수 파라미터 누락 (plant, workCenter)" });
  }
  try {
    if (!getAccessToken()) await refreshToken();
    const token = getAccessToken();
    if (!token) return res.status(500).json({ error: "SAP 토큰 발급 실패" });
    let url = `${SAP_CONFIG.GET_ORDER_LIST}?plant=${encodeURIComponent(plant)}&workCenters=${encodeURIComponent(workCenter)}`;
    if (releaseStatuses) {
      url += `&releaseStatuses=${encodeURIComponent(releaseStatuses)}`;
    }
    console.log("🌐 [SAP 요청 URL]:", url);
    const sapResp = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });
    const content = sapResp.data?.content ?? [];
    console.log("✅ [SAP 응답 - Order List]:", content.length);
    if (!Array.isArray(content) || content.length === 0) {
      return res.status(204).json({ description: "SAP 응답이 비었거나 배열 아님" });
    }
    return res.status(200).json(content);
  } catch (e) {
    const apiErr = e.response?.data?.error;
    console.error("❌ [SAP Order List 조회 실패]:", apiErr?.message || e.message);
    return res.status(502).json({
      errorStep: "SAP_CALL_ORDER_LIST",
      error: "SAP 주문 리스트 조회 실패",
      details: apiErr?.message || e.message,
      code: apiErr?.code || null
    });
  }
});
exports.default = router;
